// source: vox.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.scan2cad.Vox', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scan2cad.Vox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scan2cad.Vox.repeatedFields_, null);
};
goog.inherits(proto.scan2cad.Vox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scan2cad.Vox.displayName = 'proto.scan2cad.Vox';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scan2cad.Vox.repeatedFields_ = [4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scan2cad.Vox.prototype.toObject = function(opt_includeInstance) {
  return proto.scan2cad.Vox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scan2cad.Vox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scan2cad.Vox.toObject = function(includeInstance, msg) {
  var f, obj = {
    nElems: jspb.Message.getFieldWithDefault(msg, 1, 0),
    res: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    trunc: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    dimsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    grid2worldList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    sdfList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    maskList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    rgbList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scan2cad.Vox}
 */
proto.scan2cad.Vox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scan2cad.Vox;
  return proto.scan2cad.Vox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scan2cad.Vox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scan2cad.Vox}
 */
proto.scan2cad.Vox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNElems(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrunc(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setDimsList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setGrid2worldList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setSdfList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setMaskList(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setRgbList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scan2cad.Vox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scan2cad.Vox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scan2cad.Vox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scan2cad.Vox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNElems();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRes();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTrunc();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDimsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getGrid2worldList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getSdfList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getMaskList();
  if (f.length > 0) {
    writer.writePackedFloat(
      7,
      f
    );
  }
  f = message.getRgbList();
  if (f.length > 0) {
    writer.writePackedFloat(
      8,
      f
    );
  }
};


/**
 * optional int32 n_elems = 1;
 * @return {number}
 */
proto.scan2cad.Vox.prototype.getNElems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setNElems = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float res = 2;
 * @return {number}
 */
proto.scan2cad.Vox.prototype.getRes = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setRes = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float trunc = 3;
 * @return {number}
 */
proto.scan2cad.Vox.prototype.getTrunc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setTrunc = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated int32 dims = 4;
 * @return {!Array<number>}
 */
proto.scan2cad.Vox.prototype.getDimsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setDimsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.addDims = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.clearDimsList = function() {
  return this.setDimsList([]);
};


/**
 * repeated float grid2world = 5;
 * @return {!Array<number>}
 */
proto.scan2cad.Vox.prototype.getGrid2worldList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setGrid2worldList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.addGrid2world = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.clearGrid2worldList = function() {
  return this.setGrid2worldList([]);
};


/**
 * repeated float sdf = 6;
 * @return {!Array<number>}
 */
proto.scan2cad.Vox.prototype.getSdfList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setSdfList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.addSdf = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.clearSdfList = function() {
  return this.setSdfList([]);
};


/**
 * repeated float mask = 7;
 * @return {!Array<number>}
 */
proto.scan2cad.Vox.prototype.getMaskList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setMaskList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.addMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.clearMaskList = function() {
  return this.setMaskList([]);
};


/**
 * repeated float rgb = 8;
 * @return {!Array<number>}
 */
proto.scan2cad.Vox.prototype.getRgbList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.setRgbList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.addRgb = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scan2cad.Vox} returns this
 */
proto.scan2cad.Vox.prototype.clearRgbList = function() {
  return this.setRgbList([]);
};


goog.object.extend(exports, proto.scan2cad);
